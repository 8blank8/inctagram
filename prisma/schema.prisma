// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model GoogleProvider {
  id         String @id @default(uuid())
  username   String
  providerId String @unique
  userId     String @unique
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GitHubProvider {
  id         String @id @default(uuid())
  providerId BigInt @unique
  email      String @unique
  gitName    String @unique
  userId     String @unique
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProfile {
  id          String  @id @default(uuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      File[]
  firstName   String?
  familyName  String?
  city        String?
  country     String?
  aboutMe     String?
  dateOfBirth String?
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  username       String          @unique
  emailConfirmed Boolean         @default(false)
  password       String?
  posts          Post[]
  devices        Device[]
  googleProvider GoogleProvider?
  gitHubProvider GitHubProvider?
  userProfile    UserProfile?
}

model Device {
  id             String    @id @default(uuid())
  lastActiveDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  ip             String?
  title          String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String

  @@unique([ip, title, userId], name: "titleIpIdentifier")
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean? @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  photos    File[]
}

model File {
  id            String       @id @default(uuid())
  title         String
  url           String       @unique
  size          String
  cropProps     String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  authorId      String
  Post          Post?        @relation(fields: [postId], references: [id])
  postId        String?
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?
}
